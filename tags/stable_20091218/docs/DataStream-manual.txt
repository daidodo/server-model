	<common/DataStream.h>指南

实现了二进制数据流库，即把任意类型的对象，转化成二进制流，以便于在网络间交换数
据；或从2进制数据流中,取出需要的对象，还原数据。

1 使用指南

1.1 CInByteStream

从指定的2进制数据流中，读取需要的数据。

CInByteStream可以设置如下形式的2进制数据作为源：
	[const char * , size_t]
	[const unsigned char * , size_t]
	[const signed char * , size_t]
	std::vector<char>
	std::vector<unsigned char>
	std::vector<signed char>
除了通过构造函数设置数据源，还可以通过SetSource()在任意时间改变数据源。
SetSource()会重置所有指针和错误状态。参数netByteOrder用于设置数据源的的字节序类
型，可以是网络字节序(true)或本地字节序(false)。

OrderType()函数用于设置输入流的字节序类型(NetOrder或HostOrder)。

Seek()和Tell()函数用于设置/获取读指针cur_的位置。参数dir指定了偏移的方向和参照
点，有效的取值为：
	Begin	此时Seek()表示设置cur_相对于数据源起点的偏移为参数off的值。
		Tell()表示获取cur_相对于数据源起点的偏移量。
	End	此时Seek()表示设置cur_到数据源结尾之前off偏移量的位置。
		Tell()表示cur_到数据源结尾的距离，即剩余的数据量。
	Cur	此时Seek()表示把cur_移动off偏移量：如果off > 0，那么向后移动；
		如果off < 0，那么向前移动。
		Tell()总是返回0。
Seek()函数总是返回cur_指针相对于数据源起点的偏移量。

CurPos()和LeftSize()函数分别返回已读取的数据量和剩余的数据量。

错误状态函数：
Status()函数用于设置/获取错误状态，0表示正常状态，其他值表示异常状态。在错误状
态下，任何流输入操作都无效（什么也不做）。
ResetStatus()函数用于重置错误状态。
另外定义了operator !()和operator __SafeBool()用于检测状态是否正常。
例如：
	CInByteStream ds;
	if(!ds){
	    cerr<<"CInByteStream is in error status."
	        <<" status no = "<<ds.Status();
	}
	if(ds){
	    cout<<"CInByteStream is in good status.";
	}

流输入操作：
CInByteStream::operator >>()支持的C++内置简单类型包括：
	char
	signed char
	unsigned char
	short
	unsigned short
	int
	unsigned int
	long
	unsigned long
	long long
	unsigned long long
例如：
	CInByteStream ds(source,true);	//假定source是有效的数据源；
					//true参数表示采用网络字节序
	int val;
	char ch;
	ds>>val>>ch;	//读取一个int，并赋值给val；再读取一个char，赋值给ch

CInByteStream::operator >>()支持std::string，存储方式是：
	length(4 bytes) + data(length bytes)
例如：
	std::string str;
	ds>>str;	//首先读取一个U32，作为字符串的长度len，然后读取len字节
			//的数据，作为字符串的内容，并赋值给str

CInByteStream::operator >>()支持任意自定义类型T，只要重载
	CInByteStream & operator >>(CInByteStream & , T &);
函数，例如：
	struct A{
	    int i;
	    std::string s;
	};
	CInByteStream & operator >>(CInByteStream & ds, A & a){
	    return ds>>a.i>>a.s;
	}
然后按照下面的方式使用：
	A a;
	ds>>a;	//调用上面的operator >>(CInByteStream & , A &)

CInByteStream::operator >>()支持任意类型的数组，只要每个数组元素都被支持，存储
方式是：
	size(4 bytes,对象个数) + data(size个对象)
读取数组的方式有2种：通过对象指针，通过Manip::array()函数。
通过对象指针的示例如下：
	A arr[10];
	ds>>arr;	//arr作为指针(A *)传递给ds，A类型已被支持
			//首先读取一个U32，作为对象个数sz，然后依次读取sz个对象
			//并赋值给arr[0],arr[1],...,arr[sz - 1]。
			//注意：如果sz > 10，那么会访问越界的内存，所以这种方式
			//使用简单，但是不安全
通过array()函数的示例如下：
	A arr[10];
	size_t real_sz;
	ds>>Manip::array(arr,10,&real_sz);
			//Manip::array()包装了对象指针arr和最大长度10，real_sz
			//参数用于接收实际读到的对象个数，可以省略不传。
			//首先读取一个U32，作为对象个数sz，然后检查sz是否在数组
			//最大长度限制以内。如果不是，则设置ds的错误状态并返回；
			//如果是，则设置real_sz，依次读取sz个对象，并赋值给
			//arr[0],arr[1],...,arr[sz - 1]。
			//注意：请及时检查ds的状态。在出错状态下，ds的任何后续
			//输入操作都会失效。

CInByteStream::operator >>()支持直接读取指定个数的对象，即没有前面4字节的对象个
数字段。读取的方式有2种：通过Manip::raw()函数，通过Manip::range()函数。
通过Manip::raw()函数的示例如下：
	A arr[10];
	ds>>Manip::raw(arr,10);
			//Manip::raw()函数包装数组指针arr和对象个数10
			//直接读取10个A对象，并赋值给arr[0],...,arr[9]。
			//对于CInByteStream支持的C++简单内置类型（见前面），只
			//要可能，都会使用memcpy优化效率。
			//注意：arr必须是数组，或者连续存储区域的首地址
通过Manip::range()函数的示例如下：
	std::vector<A> arr(10);
	ds>>Manip::range(arr.begin(),arr.end());
			//Manip::range()函数对迭代器进行包装，并依次读取若干对
			//象赋值给迭代器指定范围内的每个元素。
			//注意：这种方式不会采用memcpy优化，即使读取的对象是C++
			//简单内置类型也不行，所以效率不会比采用Manip::raw()好，
			//但是这种方式有更大的灵活性。

CInByteStream::operator >>()支持从指定位置读取对象，而不改变原先读指针的位置。
通过Manip::offset_value()函数实现，例如：
	A a;
	ds>>Manip::offset_value(12,a);
			//从数据源偏移为12字节的位置，读取一个A对象，赋值给a。
			//不会改变读指针cur_的值。

CInByteStream::operator >>()支持的其他功能：
设置字节序类型，通过Manip::set_order()函数实现。
例如：
	int x;
	ds>>Manip::set_order(CInByteStream::HostOrder)
	    >>x
	    >>Manip::set_order(true);
			//首先把ds设置成本地字节序，然后读取一个int，赋值给x，
			//最后把ds设置成网络字节序
			//注：Manip::set_order()函数可以接受
			//CInByteStream::EOrderType和bool类型的参数
设置读指针位置，通过Manip::seek()函数实现。
例如：
	int x;
	ds>>Manip::seek(12,CInByteStream::Begin)
	    >>x;	//首先设置读指针为绝对偏移12字节的位置，然后读取一个int
			//Manip::seek()函数参数的意义与CInByteStream::Seek()函
			//数相同
跳过指定的字节，通过Manip::skip()函数实现。
例如：
	U32 x;
	ds>>Manip::skip(10)
	    >>x
	    >>Manip::skip(-14);
			//首先从当前读指针位置向后跳过10字节，读取一个U32，然后
			//向前跳14字节，回到原来的位置


1.2 COutByteStream

把对象写入2进制数据流中，便于传送。

构造函数接受参数sz和netByteOrder，前者表示初始缓冲区大小，如果不够会自动增长，
后者指定字节序类型（网络字节序(true)或本地字节序(false)）。


OrderType()函数用于设置输出流的字节序类型(NetOrder或HostOrder)。

Seek()函数用于设置写指针cur_的位置。参数dir指定了偏移的方向和参照
点，有效的取值为：
	Begin	此时Seek()表示设置cur_相对于缓冲区起点的偏移为参数off的值。
		Tell()表示获取cur_相对于缓冲区起点的偏移量。
	End	与Cur相同。
	Cur	此时Seek()表示把cur_移动off偏移量：如果off > 0，那么向后移动，
		即保留off字节的空间；如果off < 0，那么向前移动，即丢弃(-off)字
		节的数据。
Seek()函数总是返回cur_指针相对于缓冲区起点的偏移量。
Tell()用于获取cur_指针相对于缓冲区起点的偏移量。

Size()函数用于获取已写入的数据量。

ExportData()函数用于导出缓冲区的2进制数据，支持的目的数据类型有：
	std::string &
	std::vector<char> &
	[char * , size_t &]
参数bAppend的意义：true表示将缓冲区数据追加到目的数据的后面；false表示直接用缓
冲区数据覆盖目的地的原有数据。
注意：当目的数据类型为[char * , size_t &]时，(size_t &)类型的参数既作为传入参数
（目的地的大小），也作为传出参数（实际转移的数据大小）。如果目的地的大小不够，
则导出数据失败，ExportData()函数返回false，并且不改变COutByteStream的任何内部状
态。
转移数据成功后，ExportData()函数返回true，并重置写入指针，但是不改变错误状态。

流输出操作：
COutByteStream::operator <<()支持的C++内置简单类型包括：
	char
	signed char
	unsigned char
	short
	unsigned short
	int
	unsigned int
	long
	unsigned long
	long long
	unsigned long long
例如：
	COutByteStream ds(100,true);	//初始缓冲区为100字节
					//true参数表示采用网络字节序
	int val = 1;
	char ch = 'A';
	ds<<val<<ch;	//写入一个值为1的int，和字符'A'

COutByteStream::operator <<()支持std::string，存储方式是：
	length(4 bytes) + data(length bytes)
例如：
	std::string str;
	ds<<str;	//首先以U32类型写入字符串的长度，然后写入str的内容

COutByteStream::operator <<()支持任意自定义类型T，只要重载
	COutByteStream & operator <<(COutByteStream & , T &);
函数，例如：
	struct A{
	    int i;
	    std::string s;
	};
	COutByteStream & operator <<(COutByteStream & ds, A & a){
	    return ds<<a.i<<a.s;
	}
然后按照下面的方式使用：
	A a;
	ds<<a;	//调用上面的operator <<(COutByteStream & , A &)

COutByteStream::operator <<()支持任意类型的数组，只要每个数组元素都被支持，存储
方式是：
	size(4 bytes,对象个数) + data(size个对象)
通过Manip::array()函数实现，例如：
	A arr[10];
	ds<<Manip::array(arr,10);
			//Manip::array()包装了对象指针arr和数组长度10
			//首先以U32类型写入对象个数10，然后依次写入每个对象

COutByteStream::operator <<()支持直接写入指定个数的对象，即没有前面4字节的对象个
字段数。写入的方式有2种：通过Manip::raw()函数，通过Manip::range()函数。
通过Manip::raw()函数的示例如下：
	A arr[10];
	ds<<Manip::raw(arr,10);
			//Manip::raw()函数包装数组指针arr和对象个数10。
			//直接写入10个A对象。
			//对于COutByteStream支持的C++简单内置类型（见前面），只
			//要可能，都会使用memcpy优化效率。
			//注意：arr必须是数组，或者连续存储区域的首地址
通过Manip::range()函数的示例如下：
	std::vector<A> arr(10);
	ds<<Manip::range(arr.begin(),arr.end());
			//Manip::range()函数对迭代器进行包装，并依次写入迭代器
			//指定范围内的每个元素。
			//注意：这种方式不会采用memcpy优化，即使写的对象是C++简
			//单内置类型也不行，所以效率不会比采用Manip::raw()好，
			//但是这种方式更加灵活。

COutByteStream::operator <<()支持将对象写入到指定位置，而不改变原先写指针的位置。
通过Manip::offset_value()函数实现，例如：
	A a;
	ds<<Manip::offset_value(12,a);
			//将对象a写入缓冲区偏移为12字节的位置a，
			//不会改变写指针cur_的值。

COutByteStream::operator <<()支持的其他功能：
设置字节序类型，通过Manip::set_order()函数实现。
例如：
	int x;
	ds<<Manip::set_order(COutByteStream::HostOrder)
	    <<x
	    <<Manip::set_order(true);
			//首先把ds设置成本地字节序，然后写入一个int，
			//最后把ds设置成网络字节序
			//注：Manip::set_order()函数可以接受
			//COutByteStream::EOrderType和bool类型的参数
设置写指针位置，通过Manip::seek()函数实现。
例如：
	int x;
	ds<<Manip::seek(12,COutByteStream::Begin)
	    <<x;	//首先设置写指针为绝对偏移12字节的位置，然后写入一个int
			//Manip::seek()函数参数的意义与COutByteStream::Seek()函
			//数相同
跳过或预留指定的字节，通过Manip::skip()函数实现。
例如：
	U32 x;
	ds<<Manip::skip(-14)
	    <<x
	    <<Manip::skip(10);
			//首先从当前写指针位置向前跳14字节，写入一个U32，然后
			//向前后10字节，回到原来的位置

向指定位置插入数据，通过Manip::insert()函数实现。
例如：
	COutByteStream ds;
	ds<<U32(1)<<std::string("abc")
	    <<Manip::insert(4,U64(123));
			//将U64(123)插入缓冲区偏移为4的位置，所有后面的数据将自
			//向后移动8字节（U64的字节长度），写指针也会随之向后移
			//动8字节
等价于：
	COutByteStream ds;
	ds<<U32(1)<<U64(123)<<std::string("abc");

